<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Will&#39;s Blog</title>
    <link>https://blog.seso.io/posts/</link>
    <description>Recent content in Posts on Will&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright &amp;copy; 2018 - Willem van Ketwich</copyright>
    <lastBuildDate>Fri, 27 Dec 2019 20:26:22 +1100</lastBuildDate>
    
	<atom:link href="https://blog.seso.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Volumes With Docker in Docker</title>
      <link>https://blog.seso.io/posts/using-volumes-with-docker-in-docker/</link>
      <pubDate>Fri, 27 Dec 2019 20:26:22 +1100</pubDate>
      
      <guid>https://blog.seso.io/posts/using-volumes-with-docker-in-docker/</guid>
      <description>Docker in Docker (DIND) is a way of accessing a docker container within another docker container. It is commonly used in CI/CD pipelines as it allows the build server to be run in a docker container and allows the build pipeline that is run on the build server to also be run in a docker container.</description>
    </item>
    
    <item>
      <title>Using Python for hex, strings, bytes and integers</title>
      <link>https://blog.seso.io/posts/python-hex-strings/</link>
      <pubDate>Thu, 10 Oct 2019 21:27:52 +1100</pubDate>
      
      <guid>https://blog.seso.io/posts/python-hex-strings/</guid>
      <description>I&amp;rsquo;ve taken an interest recently in cryptography, strings, signing strings and using prime numbers for cryptography. I had to keep searching online for the best way to do a transform of my data for:</description>
    </item>
    
    <item>
      <title>Common IDE Keyboard Shortcuts</title>
      <link>https://blog.seso.io/posts/common-ide-keyboard-shortcuts/</link>
      <pubDate>Sat, 29 Jun 2019 22:56:30 +1000</pubDate>
      
      <guid>https://blog.seso.io/posts/common-ide-keyboard-shortcuts/</guid>
      <description>I’m working on an IDE framework called Tide for Vim and other editors, and thought that it would be useful to survey the ‘lay of the land’ in the space of keyboard shorcuts in existing IDEs.</description>
    </item>
    
    <item>
      <title>Gdb on MacOS</title>
      <link>https://blog.seso.io/posts/gdb-on-macos/</link>
      <pubDate>Sat, 29 Jun 2019 17:22:07 +1000</pubDate>
      
      <guid>https://blog.seso.io/posts/gdb-on-macos/</guid>
      <description>GDB, or the GNU Debugger has been around for years. It was first written by Richard Stallman in 1986 and has a long heritage on Unix, Linux and other Operating Systems.</description>
    </item>
    
    <item>
      <title>Hugo for Beginners</title>
      <link>https://blog.seso.io/posts/hugo-for-beginners/</link>
      <pubDate>Fri, 31 Aug 2018 19:04:23 +1000</pubDate>
      
      <guid>https://blog.seso.io/posts/hugo-for-beginners/</guid>
      <description>I wanted to put together some notes on how to set up a Github Pages blog using the Hugo static pages publishing application as when I went through this process myself, I found it less than intuitive.</description>
    </item>
    
    <item>
      <title>Creating a Fibonacci Generator in Assembly</title>
      <link>https://blog.seso.io/posts/creating-a-fibonacci-generator-in-assembly/</link>
      <pubDate>Thu, 30 Aug 2018 21:12:38 +1000</pubDate>
      
      <guid>https://blog.seso.io/posts/creating-a-fibonacci-generator-in-assembly/</guid>
      <description>Contents  Intro  Following along at home A beginning Some starting knowledge Overview of the implementation  Beginning the implementation  Building binary files from assembly files The structure of a GAS assembly file Sections Comments Instructions and opcodes The application entry-point and labels Compiling our code Reading from the process arguments and converting to a numeric value Debugging with GDB  Getting the length of our argument on the command line  Making things easier to understand using function calls  Converting a string to a number  Some new functions Zeroing registers Register sizes and layout Processing the string  The actual Fibonacci algorithm  Creating the stack space for our array The Fibonacci logic in assembly Setting up our variables Array memory allocation Variable initialisation Indexed memory Running the loop to completion Calculating the sequence  Printing our result  Doing things the hard way  Conclusion  From here to there   Intro Stemming from my interest in Assembly Language, I was in search of a practical example to start exploring this subterranean wilderland.</description>
    </item>
    
    <item>
      <title>First Post</title>
      <link>https://blog.seso.io/posts/first-post/</link>
      <pubDate>Fri, 15 Jun 2018 21:49:30 +1000</pubDate>
      
      <guid>https://blog.seso.io/posts/first-post/</guid>
      <description>Welcome to my new blog site. This is just a placeholder until I have some content to post here. It won&amp;rsquo;t be long&amp;hellip; :tick-tock:</description>
    </item>
    
  </channel>
</rss>